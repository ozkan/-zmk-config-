/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


// Layers
#define _COLEMAK       0
#define _LOWER         1
#define _RAISE         2
#define _SPACE_RIGHT   3
#define _SPACE_LEFT    4
#define _NAVIGATION    5

&lt {
    tapping-term-ms = <180>;
    flavor = "tap-preferred";
};

&soft_off {
    hold-time-ms = <2000>; // Only turn off it the key is held for 2 seconds or longer.
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        en_i: en_i {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp LS(I)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        tr_i: tr_i {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp LS(SQT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_del {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp DEL>;
        };
        combo_off {
            timeout-ms = <50>;
            key-positions = <0 11>;
            bindings = <&soft_off>; //The soft off behavior is used to force the keyboard into an off state. The keyboard can be turned back on again either with using the reset button found on the device.
    }; 
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC        &kp Q      &kp W            &kp F         &kp P                &kp G                                                &kp J                      &kp L          &kp U                    &kp Y             &kp LS(NON_US_HASH)   &kp BSPC
                &kp LCTRL      &kp A      &kp R            &kp S         &lt _NAVIGATION T    &kp D                                                &kp H                      &kp N          &kp E                    &en_i             &kp O                 &kp LS(N2)
                &ht LSHFT CLCK &ht LALT Z &ht LCTRL X      &ht LSHFT C   &kp V                &kp B                    &sys_reset   &bootloader    &kp K                      &kp M          &ht RSHFT NON_US_HASH    &ht RCTRL FSLH    &ht LALT RS(N7)       &ht RSHFT RET
                &none          &none      &kp RIGHT_GUI    &kp LALT      &lt _LOWER TAB       &lt _SPACE_LEFT SPACE    &none        &kp RET        &lt _SPACE_RIGHT SPACE     &mo _RAISE     &kp LEFT                 &kp DOWN          &kp UP                &kp RIGHT
            >;
        };

        lower_layer {
            bindings = <
                &kp ESC    &trans     &trans           &trans      &trans             &trans                                     &kp RS(N8)     &kp RS(N9)      &kp RS(N0)         &kp RS(N6)             &kp RA(EQUAL)    &trans
                &trans     &trans     &trans           &trans      &trans             &trans                                     &kp RA(N7)     &kp RA(N0)      &kp PLUS           &kp RA(N4)             &kp RA(N3)       &kp GRAVE
                &trans     &trans     &trans           &trans      &trans             &trans                   &none   &none     &kp RA(N8)     &kp RA(N9)      &kp NON_US_BSLH    &kp RS(NON_US_BSLH)    &kp RA(MINUS)    &trans
                &none      &none      &kp RIGHT_GUI    &kp LALT    &lt _LOWER TAB     &lt _SPACE_LEFT SPACE    &none   &none     &kp RET        &mo _RAISE      &kp LEFT           &kp DOWN               &kp UP           &kp RIGHT
            >;
        };

        raise_layer {
            bindings = <
                &kp ESC       &kp AMPS     &kp N1           &kp N2      &kp N3            &kp KP_MINUS                               &kp F1                     &kp F2        &kp F3      &kp F4      &trans    &kp DEL
                &trans        &kp MINUS    &kp N4           &kp N5      &kp N6            &kp KP_PLUS                                &kp F5                     &kp F6        &kp F7      &kp F8      &trans    &trans
                &caps_word    &kp PRCNT    &kp N7           &kp N8      &kp N9            &kp N0                   &none    &none    &kp F9                     &kp F10       &kp F11     &kp F12     &trans    &trans
                &none         &none        &kp RIGHT_GUI    &kp LALT    &lt _LOWER TAB    &lt _SPACE_LEFT SPACE    &none    &none    &lt _SPACE_RIGHT SPACE     &mo _RAISE    &kp LEFT    &kp DOWN    &kp UP    &kp RIGHT
            >;
        };

        space_right_layer {
            bindings = <
                &kp ESC    &trans      &trans           &kp RA(E)        &kp  RA(N2)       &kp LBKT                                   &kp C_PREV               &kp PG_UP     &kp UP      &trans         &trans         &trans
                &trans     &kp EXCL    &kp RA(Q)        &kp SEMI         &kp  RA(T)        &trans                                     &kp HOME                 &kp LEFT      &kp DOWN    &kp RIGHT      &kp END        &kp C_PLAY_PAUSE
                &trans     &trans      &trans           &ht LSHFT  DOT   &trans            &trans                   &none    &none    &kp C_NEXT               &kp PG_DN     &none       &kp C_VOL_DN   &kp C_VOL_UP   &kp C_MUTE
                &none      &none       &kp RIGHT_GUI    &kp LALT         &lt _LOWER TAB    &lt _SPACE_LEFT SPACE    &none    &none    &lt _SPACE_RIGHT SPACE   &mo _RAISE    &kp LEFT    &kp DOWN       &kp UP         &kp RIGHT
            >;
        };

        space_left_layer {
            bindings = <
                &trans    &trans    &trans           &trans     &trans             &trans                                      &trans                      &trans          &kp RBKT            &trans         &kp LS(SLASH)   &kp DEL
                &trans    &trans    &trans           &trans     &trans             &trans                                      &trans                      &trans          &trans              &tr_i          &kp COMMA       &kp RA(NON_US_HASH)
                &trans    &trans    &trans           &trans     &trans             &trans                    &none    &none    &trans                      &trans          &ht RSHFT RS(N3)    &kp RA(RBKT)   &kp UNDER       &trans
                &none     &none     &kp RIGHT_GUI    &kp LALT   &lt _LOWER TAB     &lt _SPACE_LEFT SPACE     &none    &none    &lt _SPACE_RIGHT SPACE      &mo _RAISE      &kp LEFT            &kp DOWN       &kp UP          &kp RIGHT
            >;
        };

        navigation_layer {
            bindings = <
                &kp ESC     &trans    &trans           &trans       &trans             &trans                                                    &kp C_PREV                 &kp PG_UP      &kp UP       &trans          &trans          &trans
                &trans      &trans    &trans           &trans       &trans             &trans                                                    &kp HOME                   &kp LEFT       &kp DOWN     &kp RIGHT       &kp END         &kp C_PLAY_PAUSE
                &trans      &trans    &trans           &trans       &trans             &trans                    &bt BT_SEL 0    &bt BT_SEL 2    &kp C_NEXT                 &kp PG_DN      &none        &kp C_VOL_DN    &kp C_VOL_UP    &kp C_MUTE
                &none       &none     &kp RIGHT_GUI    &kp LALT     &lt _LOWER TAB     &lt _SPACE_LEFT SPACE     &bt BT_SEL 3    &bt BT_CLR      &lt _SPACE_RIGHT SPACE     &mo _RAISE     &kp LEFT     &kp DOWN        &kp UP          &kp RIGHT
            >;
        };
    };
};
